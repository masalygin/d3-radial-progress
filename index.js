// Generated by CoffeeScript 1.9.1
(function() {
  var extend,
    hasProp = {}.hasOwnProperty,
    modulo = function(a, b) { return (+a % (b = +b) + b) % b; };

  extend = function(a, b) {
    var key, value;
    for (key in b) {
      if (!hasProp.call(b, key)) continue;
      value = b[key];
      a[key] = value;
    }
    return a;
  };

  this.D3RadialProgress = (function() {
    D3RadialProgress.prototype.defaults = {
      fontSize: 15,
      size: 300,
      value: 0,
      min: 0,
      max: 100,
      thick: 10
    };

    function D3RadialProgress(options) {
      extend(this, this.defaults);
      extend(this, options);
      this._layout();
      this._background();
      this._arc();
      this._label();
    }

    D3RadialProgress.prototype._layout = function() {
      this.node = d3.select(this.node);
      this.svg = this.node.append('svg');
      return this.enter = this.svg.attr('class', 'radial-progress').attr('width', this.size).attr('height', this.size);
    };

    D3RadialProgress.prototype._background = function() {
      var arc;
      arc = d3.svg.arc().startAngle(0).endAngle(Math.PI * 2).outerRadius(this.size / 2).innerRadius(this.size / 2 - this.thick);
      return this.enter.append('path').attr('class', 'bg-arc').attr('transform', "translate(" + (this.size / 2) + ", " + (this.size / 2) + ")").attr('d', arc);
    };

    D3RadialProgress.prototype._arc = function() {
      this.arc = d3.svg.arc().startAngle(0).endAngle(0).outerRadius(this.size / 2).innerRadius(this.size / 2 - this.thick);
      return this.path = this.enter.append('path').attr('class', 'arc').attr('transform', "translate(" + (this.size / 2) + ", " + (this.size / 2) + ")").attr('d', this.arc);
    };

    D3RadialProgress.prototype._label = function() {
      return this.label = this.enter.append('text').attr('class', 'label').attr('y', this.size / 2 + this.fontSize / 3).attr('x', this.size / 2).attr('width', this.size).text(this.value).style('font-size', this.fontSize + 'px');
    };

    D3RadialProgress.prototype.set = function(value, duration) {
      var self;
      if (value == null) {
        value = 100;
      }
      if (duration == null) {
        duration = 1000;
      }
      self = this;
      if (value > this.max || value < this.min) {
        value = modulo(value, this.max);
        if (value === 0) {
          value = this.max;
        }
      }
      this.label.datum(value).transition().duration(duration).tween('text', function(a) {
        var i;
        i = d3.interpolate(self.value, a);
        return function(t) {
          self.value = i(t);
          return this.textContent = Math.round(self.value) + '%';
        };
      });
      return this.path.datum(value / 100 * 2 * Math.PI).transition().duration(duration).attrTween('d', function() {
        return function() {
          var angle;
          angle = self.value / 100 * 2 * Math.PI;
          return self.arc.endAngle(angle)();
        };
      });
    };

    return D3RadialProgress;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
